// Code generated by cmd/cgo; DO NOT EDIT.

//line ibapi.go:1:1
package ibapi; import _cgo_unsafe "unsafe"

//go:generate go tool cgo ibapi.go

// NOTE: Before building, ensure you've exported these variables:
// CGO_LDFLAGS=<path_to_ib_cpp_api>/libTwsSocketClient.so
// CGO_CPP_FLAGS=-I<path_to_ib_cpp_api>

/*
#cgo CXXFLAGS: -std=c++11

#include <stdlib.h>
#include "ibapi.h"
*/
import _ "unsafe"

import (
	"runtime"
	"sync"
	"unsafe"
)

// *** Contract ***

// Contract represents a contract
type Contract struct {
	contract *_Ctype_struct_Contract
}

// NewContract creates a new contract
func NewContract(sym, secType, exch, contractMonth, currency string) *Contract {
	cSym, cSecType, cExch, cContractMonth, cCurrency := (_Cfunc_CString)(sym), (_Cfunc_CString)(secType),
		(_Cfunc_CString)(exch), (_Cfunc_CString)(contractMonth), (_Cfunc_CString)(currency)
	defer func() {
		func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(cSym))
		func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(cSecType))
		func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(cExch))
		func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(cContractMonth))
		func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(cCurrency))
	}()
	c := &Contract{contract: (_Cfunc_new_contract)(cSym, cSecType, cExch, cContractMonth, cCurrency)}
	runtime.SetFinalizer(c, deleteContract)
	return c
}

func deleteContract(c *Contract) {
	func(_cgo0 *_Ctype_struct_Contract) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_delete_contract)(_cgo0);}(c.contract)
}

// Symbol returns the symbol from the contract
func (c *Contract) Symbol() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct_Contract) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_contract_symbol)(_cgo0);}(c.contract))
}

// SecType returns the security type of the contract
func (c *Contract) SecType() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct_Contract) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_contract_sec_type)(_cgo0);}(c.contract))
}

// Exchange returns the exchange of the contract
func (c *Contract) Exchange() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct_Contract) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_contract_exchange)(_cgo0);}(c.contract))
}

// ContractMonth returns the contract month of the futures contract
func (c *Contract) ContractMonth() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct_Contract) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_contract_month)(_cgo0);}(c.contract))
}

// Currency returns the currency used for the contract
func (c *Contract) Currency() string {
	return (_Cfunc_GoString)(func(_cgo0 *_Ctype_struct_Contract) *_Ctype_char {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_contract_currency)(_cgo0);}(c.contract))
}

// *** EWrapper ***

type wrappers struct {
	m    map[_Ctype_long]EWrapper
	next _Ctype_long
	lock sync.Mutex
}

var (
	w = wrappers{m: make(map[_Ctype_long]EWrapper, 64)}
)

// OrderID represents an IB order ID
type OrderID = _Ctype_OrderId

// EWrapper represesnts an interface of IB callbacks
type EWrapper interface {
	NextValidId(orderID OrderID)
}

func findEWrapper(id _Ctype_long) EWrapper {
	w.lock.Lock()
	defer w.lock.Unlock()
	wrapper, ok := w.m[id]
	if !ok {
		// TODO: log error
		return nil
	}
	return wrapper
}

//export nextValidIDCallback
func nextValidIDCallback(id _Ctype_long, orderID _Ctype_OrderId) {
	if wrapper := findEWrapper(id); wrapper != nil {
		wrapper.NextValidId(orderID)
	}
}

// *** EClientSocket ***

const timeoutMs = 2000

// IBClient represents an IB client socket
type IBClient struct {
	client *_Ctype_struct_IBClient
	id     _Ctype_long
}

// NewIBClient returns a new client socket with the given EWrapper callbacks
func NewIBClient(wrapper EWrapper) *IBClient {
	w.lock.Lock()
	next := w.next
	w.m[next] = wrapper
	w.next++
	w.lock.Unlock()

	return &IBClient{client: (_Cfunc_new_client)(next, timeoutMs), id: next}
}

// Connect attempts to connect to TWS/IBGateway on the given host/port and client ID
func (c *IBClient) Connect(host string, port, clientID int) bool {
	cHost := (_Cfunc_CString)(host)
	defer func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(cHost))
	return bool(func(_cgo0 *_Ctype_struct_IBClient, _cgo1 *_Ctype_char, _cgo2 _Ctype_int, _cgo3 _Ctype_int) _Ctype__Bool {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_client_connect)(_cgo0, _cgo1, _cgo2, _cgo3);}(c.client, cHost, _Ctype_int(port), _Ctype_int(clientID)))
}

// Disconnect attempts to disconnect from TWS/IBGateway
func (c *IBClient) Disconnect() {
	func(_cgo0 *_Ctype_struct_IBClient) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_client_disconnect)(_cgo0);}(c.client)
}

// IsConnected returns the connection state of the client
func (c *IBClient) IsConnected() bool {
	return bool(func(_cgo0 *_Ctype_struct_IBClient) _Ctype__Bool {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_client_is_connected)(_cgo0);}(c.client))
}

// ProcessMsg processes the next msg waiting on the client
func (c *IBClient) ProcessMsg() {
	func(_cgo0 *_Ctype_struct_IBClient) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_client_process_msg)(_cgo0);}(c.client)
}

// Delete frees the underlying CPP resources and removes the wrapper from the map
func (c *IBClient) Delete() {
	// First, get rid of the underlying socket to prevent callbacks
	func(_cgo0 *_Ctype_struct_IBClient) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_delete_client)(_cgo0);}(c.client)
	// Now remove the reference to the ewrapper from the map
	w.lock.Lock()
	delete(w.m, c.id)
	w.lock.Unlock()
}
